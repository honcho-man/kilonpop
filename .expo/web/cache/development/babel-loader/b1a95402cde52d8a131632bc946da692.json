{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport BottomNav from \"./components/nav\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      appIsReady = _useState2[0],\n      setAppIsReady = _useState2[1];\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return setTimeout(resolve, 2000);\n              }));\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 8:\n              _context.prev = 8;\n              setAppIsReady(true);\n              return _context.finish(8);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 5, 8, 11]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!appIsReady) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return _jsxs(NavigationContainer, {\n    onLayout: onLayoutRootView,\n    children: [_jsx(BottomNav, {}), _jsx(StatusBar, {\n      backgroundColor: '#030303',\n      style: 'light'\n    })]\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useState","Entypo","SplashScreen","Font","StatusBar","BottomNav","NavigationContainer","App","appIsReady","setAppIsReady","prepare","Promise","resolve","setTimeout","console","warn","onLayoutRootView","hideAsync"],"sources":["C:/Users/DELL/Desktop/kilonpop/App.js"],"sourcesContent":["\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, Image, TouchableOpacity, Dimensions } from 'react-native';\nimport BottomNav from './components/nav';\nimport { NavigationContainer } from '@react-navigation/native';\n\n// Keep the splash screen visible while we fetch resources\n//SplashScreen.preventAutoHideAsync();\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Pre-load fonts, make any API calls you need to do here\n        //await Font.loadAsync(Entypo.font);\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer onLayout={onLayoutRootView}>\n      <BottomNav />\n      <StatusBar backgroundColor={'#030303'}  style={'light'}></StatusBar>\n    </NavigationContainer>\n  );\n}"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,SAAT,QAA0B,iBAA1B;;;;;;;AAEA,OAAOC,SAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;;;AAKA,eAAe,SAASC,GAAT,GAAe;EAC5B,gBAAoCP,QAAQ,CAAC,KAAD,CAA5C;EAAA;EAAA,IAAOQ,UAAP;EAAA,IAAmBC,aAAnB;;EACAV,SAAS,CAAC,YAAM;IACd,SAAeW,OAAf;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAIU,IAAIC,OAAJ,CAAY,UAAAC,OAAO;gBAAA,OAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAd;cAAA,CAAnB,CAJV;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAMIE,OAAO,CAACC,IAAR;;YANJ;cAAA;cASIN,aAAa,CAAC,IAAD,CAAb;cATJ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAaAC,OAAO;EACR,CAfQ,EAeN,EAfM,CAAT;EAiBA,IAAMM,gBAAgB,GAAGlB,WAAW,CAAC;IAAA;MAAA;QAAA;UAAA;YAAA,KAC/BU,UAD+B;cAAA;cAAA;YAAA;;YAAA;YAAA,iCAO3BN,YAAY,CAACe,SAAb,EAP2B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,EASjC,CAACT,UAAD,CATiC,CAApC;;EAWA,IAAI,CAACA,UAAL,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,OACE,MAAC,mBAAD;IAAqB,QAAQ,EAAEQ,gBAA/B;IAAA,WACE,KAAC,SAAD,KADF,EAEE,KAAC,SAAD;MAAW,eAAe,EAAE,SAA5B;MAAwC,KAAK,EAAE;IAA/C,EAFF;EAAA,EADF;AAMD"},"metadata":{},"sourceType":"module"}